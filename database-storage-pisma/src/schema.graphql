type Query {
  me: User!
  context: String!
  user(userId: Int!): User!
  users: [User!]!
  post(postId: Int!): Post!
  posts(query: String): [Post]!
  allPosts: [Post!]!
  myPosts(query: String): [Post]!
  comment(commentId: Int!): Comment!
  comments: [Comment!]!
}

type Mutation {
  generatePwdHash(password: String!): String!
  login(user: String!, password: String!): LoginPayload!
  createUser(data: newUserInput): User!
  updateUser(data: updateUserInput!): User!
  deleteUser: User!
  createPost(data: newPostInput): Post! 
  updatePost(postId: Int!, data: updatePostInput): Post!
  deletePost(postId: Int!): Post!
  createComment(data: newCommentInput): Comment! 
  updateComment(commentId: Int!, text: String!): Comment!
  deleteComment(commentId: Int!): Comment!
}

type Subscription {
	comment(postId: Int!): CommentSubscriptionPayload!
	post: PostSubscriptionPayload!
  user: UserSubscriptionPayload!
}

type User {
  id: Int!
	name: String!
  email: String!
  password: String!
  posts: [Post]!
  comments: [Comment]!
}

type Post {
  id: Int!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment]!
}

type Comment {
  id: Int!
  text: String!
  date: String!
  author: User!
  post: Post!
}

input newUserInput {
  name: String!
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  email: String
  password: String
}

input newPostInput {
  title: String!
  body: String!
  published: Boolean
}

input updatePostInput {
  title: String
  body: String
  published: Boolean
}

input newCommentInput {
  text: String!
  post: Int!
}

enum MutationType {
	CREATE
	UPDATE
	DELETE
}

type UserSubscriptionPayload {
	mutation: MutationType!
	data: User!
}

type PostSubscriptionPayload {
	mutation: MutationType!
	data: Post!
}

type CommentSubscriptionPayload {
	mutation: MutationType!
	data: Comment!
}

type LoginPayload {
  user: User!
  token: String!
}

